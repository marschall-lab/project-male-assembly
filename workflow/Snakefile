
import pathlib

if config.get('use_reference_containers', True):
    refcon_module = pathlib.Path("ref-container/workflow/rules/ext_include/refcon_load.smk")
    refcon_repo_path = config.get("refcon_repo_path", None)
    if refcon_repo_path is None:
        refcon_repo_path = pathlib.Path(workflow.basedir).parent.parent
    else:
        refcon_repo_path = pathlib.Path(refcon_repo_path)
        assert refcon_repo_path.is_dir()
    refcon_include_module = refcon_repo_path / refcon_module
    include: refcon_include_module

include: 'rules/00_pyfun_input.smk'
include: 'rules/00_pyfun_utils.smk'
include: 'rules/10_utils.smk'
include: 'rules/20_preprocessing.smk'
include: 'rules/30_hybrid_assembly.smk'
include: 'rules/40_align_contigs.smk'
include: 'rules/50_align_reads.smk'
include: 'rules/99_pop_share.smk'

localrules: run_all

COMPLETE_SAMPLES = sorted(set(ONTUL_SAMPLES).intersection(set(HIFIEC_SAMPLES)))
if 'NA19317' in COMPLETE_SAMPLES and 'NA19347' in COMPLETE_SAMPLES:
    COMPLETE_SAMPLES.append('NA193N7')


rule run_all:
    input:
        run_ok = expand(
            'output/alignments/contigs-to-ref/{sample_long}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.paf.gz',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIEC', 'HIFIAF'],
            ont_type=['ONTUL'],
            mapq=['mq00'],
            chrom=['chrY'],
            reference=['T2TXY', 'GRCh38']
        )


rule populate_share:
    input:
        refs = 'output/share/references.ok',
        readsets = expand(
            'output/share/read_subsets/{sample_long}_{read_type}.{chrom}-reads.{mapq}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            read_type=['HIFIEC', 'HIFIAF', 'ONTUL'],
            mapq=['mq00'],
            chrom=['chrY'],
        ),
        assemblies = expand(
            'output/share/assemblies/verkko_{release}_{commit}/{sample_long}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIEC', 'HIFIAF'],
            ont_type=['ONTUL'],
            mapq=['mq00'],
            chrom=['chrY'],
            release=config['verkko_release'],
            commit=config['verkko_commit']
        ),
        aln_ctg_ref = expand(
            'output/share/alignments/contigs-to-ref/verkko_{release}_{commit}/{sample_long}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIEC', 'HIFIAF'],
            ont_type=['ONTUL'],
            mapq=['mq00'],
            chrom=['chrY'],
            reference=['T2TXY', 'GRCh38'],
            release=config['verkko_release'],
            commit=config['verkko_commit'],
        )