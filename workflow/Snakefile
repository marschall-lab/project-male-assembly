
import pathlib

if config.get('use_reference_containers', True):
    refcon_module = pathlib.Path("ref-container/workflow/rules/ext_include/refcon_load.smk")
    refcon_repo_path = config.get("refcon_repo_path", None)
    if refcon_repo_path is None:
        refcon_repo_path = pathlib.Path(workflow.basedir).parent.parent
    else:
        refcon_repo_path = pathlib.Path(refcon_repo_path)
        assert refcon_repo_path.is_dir()
    refcon_include_module = refcon_repo_path / refcon_module
    include: refcon_include_module

include: 'rules/00_pyfun_input.smk'
include: 'rules/00_pyfun_utils.smk'

# samples with short-read data can be used to compute
# an assembly QV estimate
SAMPLES, SHORT_READ_SAMPLE_NAMES = read_sample_table()  # requires config['samples']
SAMPLE_DATA = collect_sample_data(SAMPLES, SHORT_READ_SAMPLE_NAMES)
SAMPLE_NAMES = sorted(SAMPLES['sample'].values)
SAMPLE_NAME_CONSTRAINT = '(' + '|'.join(SAMPLE_NAMES) + ')'

# HG03456 dropped b/c of its XYY karyotype
CURRENT_ERROR_SAMPLES = ['HG03456', 'NA24385']
COMPLETE_SAMPLES = [s for s in SAMPLE_NAMES if s not in CURRENT_ERROR_SAMPLES]
COMPLETE_SR_SAMPLES = [s for s in SHORT_READ_SAMPLE_NAMES if s not in CURRENT_ERROR_SAMPLES]
QC_SAMPLES = ['HG02666', 'HG01457', 'NA18989', 'NA19384']

# for revision: evaluate variation in PAR region/at boundary more specifically
# for samples (here: all samples with mostly complete PAR1 assembly)
PAR1_SAMPLES = [
    "HG01890", "HC02666", "HC19384", "NA19331",
    "HG02011", "HG03371", "NA19317", "HC18989",
    "HG03009", "HG00358"
]

include: 'rules/10_utils.smk'
include: 'rules/20_preprocessing.smk'
include: 'rules/30_hybrid_assembly.smk'
include: 'rules/35_motif_search.smk'
include: 'rules/40_align_contigs.smk'
include: 'rules/50_align_reads.smk'
include: 'rules/55_subset_wg.smk'
include: 'rules/60_eval_contig_align.smk'
include: 'rules/65_call_variants.smk'
include: 'rules/70_est_assm_qv.smk'
include: 'rules/75_assm_stats.smk'
include: 'rules/80_est_assm_errors.smk'
include: 'rules/85_quality_factors.smk'
include: 'rules/90_est_gaps.smk'
include: 'rules/99_pop_share.smk'

localrules: run_all


rule run_all:
    input:
        aln_ref = expand(
            'output/alignments/reads-to-ref/{sample}.{other_reads}_aln-to_{reference}.{ext}',
            sample=COMPLETE_SAMPLES,
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            ext=['paf.gz', 'bam.bai']
        ),
        run_wg = expand(
            'output/eval/contigs-to-ref/10_renamed/{sample}.{hifi_type}.{ont_type}.na.wg_aln-to_{reference}.ref-cov.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38']
        ),
        aln_wg = expand(
            'output/alignments/reads-to-assm/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.wg.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        cache_rdref_aln = expand(
            'output/subset_wg/60_subset_rdref/{sample}.READS_aln-to_{reference}.{chrom}.cache.h5',
            sample=COMPLETE_SAMPLES,
            reference=['T2T'],
            chrom=['chrY']
        ),
        motifs_wg = expand(
            'output/motif_search/20_target_agg/10_renamed/{sample}.{hifi_type}.{ont_type}.na.wg.{motif}.agg-trg.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        subset_assm = expand(
            'output/subset_wg/20_extract_contigs/{sample}.{hifi_type}.{ont_type}.na.{chrom}.fasta',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrY', 'chrX']
        ),
        subset_ctg_aln = expand(
            'output/subset_wg/30_extract_ctgaln/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_{reference}.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38'],
            ext=['bam.bai', 'paf.gz']
        ),
        cache_ctg_aln = expand(
            'output/subset_wg/30_extract_ctgaln/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_{reference}.cache.h5',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38'],
        ),
        subset_read_aln = expand(
            'output/subset_wg/40_extract_rdaln/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        cache_read_aln = expand(
            'output/subset_wg/40_extract_rdaln/{sample}.READS_aln-to_{hifi_type}.{ont_type}.na.{chrom}.cache.h5',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrY']
        ),
        subset_motif_seq = expand(
            'output/subset_wg/50_subset_motif/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.hiq-seq.fasta',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        repmasker = expand(
            'output/motif_search/45_rm_norm/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            ext=['rm-out.tar.gz', 'rm-mask.fasta', 'matches.tsv']
        ),
        aln_classes = expand(
            'output/alignments/seqclasses-to-assm/{seq_classes}_aln-to_{sample}.{hifi_type}.{ont_type}.na.chrY.paf.gz',
            seq_classes=['GRCh38_chrY-seq-classes_coord_plus_repeats'],
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        snv_calls_dv = expand(
            'output/variant_calls/10_filter_{other_reads}/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{caller}-HET-SNV.stats',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW'],
            caller=['dv']
        ),
        snv_calls_pr = expand(
            'output/variant_calls/10_filter_{other_reads}/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{caller}-HET-SNV.stats',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL'],
            caller=['pr']
        ),
        est_assm_qv = expand(
            'output/eval/assembly_qv/SAMPLES.{hifi_type}.{ont_type}.na.wg.yak-qv.tsv',
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL']
        ),
        dump_short_meryl_db = expand(
            'output/kmer_dump/{sample}.{reads}.k{kmer}.meryl',
            sample=COMPLETE_SR_SAMPLES,
            reads=['SHORT'],
            kmer=[21]  # this value: Merqury/meryl docs, for human diploid
        ),
        vm_assm_errors = expand(
            'output/eval/assm_errors/{sample}.{hifi_type}.{ont_type}.na.{chrom}.{other_reads}.vm.chk',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW'],
            chrom=['chrX', 'chrY']
        ),
        quast_reports = expand(
            'output/eval/assm_stats/SAMPLES.{hifi_type}.{ont_type}.na.{chrom}.quast-report.tsv',
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrX', 'chrY', 'wg']
        ),
        close_samples = [
            'output/alignments/contigs-to-contigs/NA19347.HIFIRW.ONTUL.na.chrY_aln-to_NA19317.paf.gz',
            'output/alignments/contigs-to-contigs/NA19317.HIFIRW.ONTUL.na.chrY_aln-to_NA19347.paf.gz',
        ],
        assm_errors_vm_dv = expand(
            'output/eval/merged_errors/norm_tables/{sample}.{hifi_type}.{ont_type}.na.{chrom}.{other_reads}.{source}-errors.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW'],
            chrom=['chrY'],
            source=['vm', 'dv']
        ),
        assm_errors_pr = expand(
            'output/eval/merged_errors/norm_tables/{sample}.{hifi_type}.{ont_type}.na.{chrom}.{other_reads}.{source}-errors.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL'],
            chrom=['chrY'],
            source=['pr']
        ),
        assm_errors = expand(
            'output/eval/merged_errors/SAMPLES.{hifi_type}.{ont_type}.na.{chrom}.error-stats.tsv',
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrY'],
        )


rule populate_share:
    input:
        refs = 'output/share/references.ok',
        aln_reads_ref = expand(
            'output/share/alignments/reads-to-ref/{sample}.{other_reads}_aln-to_{reference}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            chrom=['chrY']
        ),
        aln_reads_ref_HG002 = expand(
            'output/share/alignments/reads-to-ref/{sample}.{other_reads}_aln-to_{reference}.{chrom}.copied.ok',
            sample=['NA24385'],
            other_reads=['HIFIRW', 'ONTUL'],
            reference=['T2TXY', 'GRCh38'],
            chrom=['chrY']
        ),
        assemblies = expand(
            'output/share/assemblies/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY', 'chrX'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_ctg_ref = expand(
            'output/share/alignments/contigs-to-ref/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_reads_assm = expand(
            'output/share/alignments/reads-to-assm/verkko_{major}_{minor}/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW', 'ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_seqclass_assm = expand(
            'output/share/alignments/seqclasses-to-assm/verkko_{major}_{minor}/{seq_classes}_aln-to_{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrY'],
            seq_classes=['GRCh38_chrY-seq-classes_coord_plus_repeats', 'T2T.chrY-seq-classes'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        motif_sub = expand(
            'output/share/motif_search/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        repmask_out = expand(
            'output/share/repeatmasker/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        motif_sub_ref = expand(
            'output/share/motif_search/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.copied.ok',
            sample=['T2T'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        repmask_out_ref = expand(
            'output/share/repeatmasker/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=['T2T'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        var_calls = expand(
            'output/share/variant_calls/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        assm_errors = expand(
            'output/share/assembly_errors/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),

        )


rule run_verkko_wg:
    input:
        ctg_agg = expand(
            'output/alignments/contigs-to-ref/{sub_folder}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.ctg-agg.tsv',
            sub_folder=['00_raw'],
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg'],
            reference=['T2TXY']
        )


rule cache_read_stats:
    input:
        hdf = expand(
            'output/stats/reads/cached/{sample}.{reads}.read-stats.h5',
            sample=COMPLETE_SAMPLES,
            reads=['HIFIRW', 'ONTUL']
        ),
        agg_err = expand(
            'output/eval/error_clusters/SAMPLES.{hifi_type}.{ont_type}.{mapq}.{chrom}.mrg-seqclass-errors.tsv',
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrY']
        )


rule run_ref_motifs:
    input:
        motif_sub_ref = expand(
            'output/share/reference_motifs/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.{motif}.copied.ok',
            sample=['T2T'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrY'],
            motif=config['motif_search']

        ),
        repmask_out_ref = expand(
            'output/share/reference_repmask/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=['T2T'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrY']
        ),


rule run_hmmer_tspy:
    input:
        motif_sub = expand(
            'output/share/motif_search/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=['TSPY'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),


rule cache_all_aln:
    input:
        cache_rdref_aln = expand(
            'output/subset_wg/60_subset_rdref/{sample}.READS_aln-to_{reference}.{chrom}.cache.h5',
            sample=COMPLETE_SAMPLES,
            reference=['T2TXY'],
            chrom=['chrY']
        ),
        close_samples = [
            'output/alignments/contigs-to-contigs/NA19347.HIFIRW.ONTUL.na.chrY_aln-to_NA19317.cache.h5',
            'output/alignments/contigs-to-contigs/NA19317.HIFIRW.ONTUL.na.chrY_aln-to_NA19347.cache.h5',
        ],
        coverage_pairs = [
            'output/alignments/contigs-to-contigs/NA19384.HIFIRW.ONTUL.na.chrY_aln-to_HC19384.cache.h5',
            'output/alignments/contigs-to-contigs/HC19384.HIFIRW.ONTUL.na.chrY_aln-to_NA19384.cache.h5',
            'output/alignments/contigs-to-contigs/NA18989.HIFIRW.ONTUL.na.chrY_aln-to_HC18989.cache.h5',
            'output/alignments/contigs-to-contigs/HC18989.HIFIRW.ONTUL.na.chrY_aln-to_NA18989.cache.h5',
            'output/alignments/contigs-to-contigs/HC02666.HIFIRW.ONTUL.na.chrY_aln-to_HG02666.cache.h5',
            'output/alignments/contigs-to-contigs/HG02666.HIFIRW.ONTUL.na.chrY_aln-to_HC02666.cache.h5',
            'output/alignments/contigs-to-contigs/HG01457.HIFIRW.ONTUL.na.chrY_aln-to_HC01457.cache.h5',
            'output/alignments/contigs-to-contigs/HC01457.HIFIRW.ONTUL.na.chrY_aln-to_HG01457.cache.h5',
        ],
        cache_self_aln = expand(
            'output/alignments/contigs-to-contigs/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_{sample}.cache.h5',
            sample=['HC01457', 'HC02666', 'HC18989', 'HC19384', 'HG00358', 'HG01890', 'NA19317', 'NA19347'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        cache_read_aln = expand(
            'output/subset_wg/40_extract_rdaln/{sample}.READS_aln-to_{hifi_type}.{ont_type}.na.{chrom}.cache.h5',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrY']
        ),
        cache_ctg_aln = expand(
            'output/subset_wg/30_extract_ctgaln/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_{reference}.cache.h5',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38'],
        ),
        cache_hifiasm_aln = expand(
            'output/eval/contigs-to-contigs/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_hifiasm.cache.h5',
            sample=['HC01457', 'HC02666', 'HC18989', 'HC19384', 'HG00358', 'HG01890', 'NA19317', 'NA19347'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        )


rule summarize_all_contig_alignments:
    input:
        ctg_self = expand(
            'output/eval/contigs-to-contigs/{sample}.HIFIRW.ONTUL.na.chrY_aln-to_{sample}.stats.tsv',
            sample=['HC01457', 'HC02666', 'HC18989', 'HC19384', 'HG00358', 'HG01890', 'NA19317', 'NA19347'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        ctg_hifiasm = expand(
            'output/eval/contigs-to-contigs/{sample}.HIFIRW.ONTUL.na.chrY_aln-to_hifiasm.stats.tsv',
            sample=['HC01457', 'HC02666', 'HC18989', 'HC19384', 'HG00358', 'HG01890', 'NA19317', 'NA19347'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        ctg_ref = expand(
            'output/eval/contigs-to-contigs/{sample}.HIFIRW.ONTUL.na.chrY_aln-to_T2TXY.stats.tsv',
            sample=['HC01457', 'HC02666', 'HC18989', 'HC19384', 'HG00358', 'HG01890', 'NA19317', 'NA19347'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        ctg_afr_pair = [
            'output/eval/contigs-to-contigs/NA19347.HIFIRW.ONTUL.na.chrY_aln-to_NA19317.stats.tsv',
            'output/eval/contigs-to-contigs/NA19317.HIFIRW.ONTUL.na.chrY_aln-to_NA19347.stats.tsv',
        ],
        ctg_cov_pair = [
            'output/eval/contigs-to-contigs/NA18989.HIFIRW.ONTUL.na.chrY_aln-to_HC18989.stats.tsv',
            'output/eval/contigs-to-contigs/HC18989.HIFIRW.ONTUL.na.chrY_aln-to_NA18989.stats.tsv',
            'output/eval/contigs-to-contigs/NA19384.HIFIRW.ONTUL.na.chrY_aln-to_HC19384.stats.tsv',
            'output/eval/contigs-to-contigs/HC19384.HIFIRW.ONTUL.na.chrY_aln-to_NA19384.stats.tsv',
            'output/eval/contigs-to-contigs/HC02666.HIFIRW.ONTUL.na.chrY_aln-to_HG02666.stats.tsv',
            'output/eval/contigs-to-contigs/HG02666.HIFIRW.ONTUL.na.chrY_aln-to_HC02666.stats.tsv',
            'output/eval/contigs-to-contigs/HG01457.HIFIRW.ONTUL.na.chrY_aln-to_HC01457.stats.tsv',
            'output/eval/contigs-to-contigs/HC01457.HIFIRW.ONTUL.na.chrY_aln-to_HG01457.stats.tsv',
        ],


rule run_veritymap:
    input:
        vm_assm_chk = expand(
            'output/eval/assm_errors/{sample}.{hifi_type}.{ont_type}.na.{chrom}.{other_reads}.vm.chk',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW', 'ONTUL'],
            chrom=['chrX', 'chrY']
        ),


rule norm_vm_output:
    input:
        assm_errors = expand(
            'output/share/assembly_errors/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),

        )


localrules: build_plotting_summaries
rule build_plotting_summaries:
    input:
        'references_derived/GRCh38_chrY.acgt-stats.tsv',
        'output/quality_factors/model_stats.HIFIRW.ONTUL.all-targets.tsv',
        'output/eval/error_clusters/SAMPLES.HIFIRW.ONTUL.na.chrY.mrg-seqclass-errors.tsv',
        'output/stats/contigs/SAMPLES.HIFIRW.ONTUL.na.chrY.seqclasses.tsv',
        'output/stats/contigs/lenassm-total-seqcls.by-contig.HIFIRW.ONTUL.na.chrY.flat.tsv',
        'output/stats/kmers/SAMPLES.HIFIRW.ONTUL.na.chrY.k31.diffs.tsv',
        'output/eval/assembly_qv/SAMPLES.HIFIRW.ONTUL.na.wg.yak-qv.tsv',
        'output/stats/coverage/SAMPLES.HIFIRW.ONTUL.na.chrY.read-cov-seqclass.tsv',
        'output/eval/assm_stats/SAMPLES.HIFIRW.ONTUL.na.chrY.quast-report.tsv',
        'output/eval/assm_stats/SAMPLES.HIFIRW.ONTUL.na.chrX.quast-report.tsv',
        'output/eval/assm_stats/SAMPLES.HIFIRW.ONTUL.na.wg.quast-report.tsv',
        'output/stats/reads/SAMPLES.READS.read-stats.tsv',
        'output/eval/merged_errors/SAMPLES.HIFIRW.ONTUL.na.chrY.error-stats.tsv',


rule run_estimte_chry_qv:
    input:
        bams = expand(
            "output/eval/chry_qv/SAMPLES.{hifi_type}.{ont_type}.{mapq}.chrY.yak-qv.tsv",
            hifi_type=["HIFIRW"],
            ont_type=["ONTUL"],
            mapq=["na"]
        ),
        covs = expand(
            "output/eval/chry_qv/hist_cov/{sample}.{hifi_type}.{ont_type}.{mapq}.chrY.hist-cov.tsv",
            sample=COMPLETE_SR_SAMPLES,
            hifi_type=["HIFIRW"],
            ont_type=["ONTUL"],
            mapq=["na"]

        )


### BELOW: some dedicated rules for additional tasks needed
# for the revision

rule copy_subset_x_contig_alignments:
    """ Needed by Pete A. to check
    variation in PAR regions
    """
    input:
        aln_ctg_ref = expand(
            'output/share/alignments/contigs-to-ref/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrX'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
