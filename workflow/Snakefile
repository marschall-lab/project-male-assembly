
import pathlib

if config.get('use_reference_containers', True):
    refcon_module = pathlib.Path("ref-container/workflow/rules/ext_include/refcon_load.smk")
    refcon_repo_path = config.get("refcon_repo_path", None)
    if refcon_repo_path is None:
        refcon_repo_path = pathlib.Path(workflow.basedir).parent.parent
    else:
        refcon_repo_path = pathlib.Path(refcon_repo_path)
        assert refcon_repo_path.is_dir()
    refcon_include_module = refcon_repo_path / refcon_module
    include: refcon_include_module

include: 'rules/00_pyfun_input.smk'
include: 'rules/00_pyfun_utils.smk'
include: 'rules/10_utils.smk'
include: 'rules/20_preprocessing.smk'
include: 'rules/30_hybrid_assembly.smk'
include: 'rules/35_motif_search.smk'
include: 'rules/40_align_contigs.smk'
include: 'rules/50_align_reads.smk'
include: 'rules/55_subset_wg.smk'
include: 'rules/60_eval_contig_align.smk'
include: 'rules/99_pop_share.smk'

localrules: run_all

COMPLETE_SAMPLES = sorted(set(ONTUL_SAMPLES).intersection(set(HIFIRW_SAMPLES)))
if 'NA19317' in COMPLETE_SAMPLES and 'NA19347' in COMPLETE_SAMPLES:
    COMPLETE_SAMPLES.append('NA193N7')

CURRENT_ERROR_SAMPLES = ['HC19384', 'NA19384', 'HG00358', 'NA19317']

batches = {
    'batch1': ['HC02666', 'HC18989', 'HC01457', 'HC19384', 'HG01890', 'HG00358', 'HG03579', 'HG01243', 'HG01952'],
    'batch2': ['HG03248', 'NA19347', 'HG02554', 'HG02953', 'NA19331', 'HG03009', 'NA19650', 'NA18534', 'NA19317'],
    'batch3': [],
    'batch4': [],
    'batch5': ['HG02666', 'NA18989', 'HG01457', 'NA19384'],  # batch5: only contains yr2 samples that also exist as high-coverage version
    'batch6': ['HG01890', 'HG02554', 'HC02666', 'NA19347', 'HG03579', 'HG01952', 'HG01243', 'HC18989', 'HG00358']  # tmp debug batch
}

if bool(config.get('mnml_test', False)):
    COMPLETE_SAMPLES = ['HC02666', 'HC18989']
elif bool(config.get('ext_test', False)):
    COMPLETE_SAMPLES = ['HC02666', 'HC18989', 'HC01457', 'HC19384']
elif bool(config.get('hprc_test', False)):
    COMPLETE_SAMPLES = ['HG03579']
else:
    # check if any batches are set
    batch_keys = [k for k in config.keys() if k.startswith('batch')]
    if batch_keys:
        COMPLETE_SAMPLES = []
        for bk in batch_keys:
            if bk.endswith('N'):
                for samples in batches.values():
                    COMPLETE_SAMPLES.extend(samples)
                    break
            else:
                samples = batches[bk]
                COMPLETE_SAMPLES.extend(samples)

COMPLETE_SAMPLES = [s for s in COMPLETE_SAMPLES if s not in CURRENT_ERROR_SAMPLES]


rule run_all:
    input:
        aln_ref = expand(
            'output/alignments/reads-to-ref/{sample_long}.{other_reads}_aln-to_{reference}.{ext}',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            ext=['paf.gz', 'bam.bai']
        ),
        run_wg = expand(
            'output/eval/contigs-to-ref/{sample_long}.{hifi_type}.{ont_type}.na.wg_aln-to_{reference}.ref-cov.tsv',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38']
        ),
        aln_wg = expand(
            'output/alignments/reads-to-assm/{sample_long}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.wg.{ext}',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        motifs_wg = expand(
            'output/motif_search/20_target_agg/{sample_long}.{hifi_type}.{ont_type}.na.wg.{motif}.agg-trg.tsv',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        subset_assm = expand(
            'output/subset_wg/20_extract_contigs/{sample_long}.{hifi_type}.{ont_type}.na.chrY.fasta',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        subset_ctg_aln = expand(
            'output/subset_wg/30_extract_ctgaln/{sample_long}.{hifi_type}.{ont_type}.na.chrY_aln-to_{reference}.{ext}',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38'],
            ext=['sort.bam.bai', 'paf.gz']
        ),
        subset_read_aln = expand(
            'output/subset_wg/40_extract_rdaln/{sample_long}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        subset_motif_seq = expand(
            'output/subset_wg/50_subset_motif/{sample_long}.{hifi_type}.{ont_type}.na.chrY.{motif}.hiq-seq.fasta',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        repmasker = expand(
            'output/motif_search/45_rm_norm/{sample_long}/{sample_long}.{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            ext=['rm-out.tar.gz', 'rm-mask.fasta', 'matches.tsv']
        )


rule populate_share:
    input:
        refs = 'output/share/references.ok',
        aln_reads_ref = expand(
            'output/share/alignments/reads-to-ref/{sample_long}.{other_reads}_aln-to_{reference}.{chrom}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            chrom=['chrY']
        ),
        assemblies = expand(
            'output/share/assemblies/verkko_{major}_{minor}/{sample_long}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_ctg_ref = expand(
            'output/share/alignments/contigs-to-ref/verkko_{major}_{minor}/{sample_long}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_reads_assm = expand(
            'output/share/alignments/reads-to-assm/verkko_{major}_{minor}/{sample_long}.{other_reads}_aln-to_{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW', 'ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        motif_sub = expand(
            'output/share/motif_search/verkko_{major}_{minor}/{sample_long}.{hifi_type}.{ont_type}.na.chrY.{motif}.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        repmask_out = expand(
            'output/share/repeatmasker/verkko_{major}_{minor}/{sample_long}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        )

        # DEPRECATED: whole-genome runs by default
        # readsets = expand(
        #     'output/share/read_subsets/{sample_long}_{read_type}.{chrom}-reads.{mapq}.copied.ok',
        #     sample_long=[SAMPLE_INFOS[sample]['long_id'] for sample in COMPLETE_SAMPLES if SAMPLE_INFOS[sample]['sex'] == 'M'],
        #     read_type=['HIFIEC', 'HIFIAF', 'ONTUL'],
        #     mapq=['mq00'],
        #     chrom=['chrY'],
        # ),
