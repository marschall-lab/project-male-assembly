
import pathlib

if config.get('use_reference_containers', True):
    refcon_module = pathlib.Path("ref-container/workflow/rules/ext_include/refcon_load.smk")
    refcon_repo_path = config.get("refcon_repo_path", None)
    if refcon_repo_path is None:
        refcon_repo_path = pathlib.Path(workflow.basedir).parent.parent
    else:
        refcon_repo_path = pathlib.Path(refcon_repo_path)
        assert refcon_repo_path.is_dir()
    refcon_include_module = refcon_repo_path / refcon_module
    include: refcon_include_module

include: 'rules/00_pyfun_input.smk'
include: 'rules/00_pyfun_utils.smk'
include: 'rules/10_utils.smk'
include: 'rules/20_preprocessing.smk'
include: 'rules/30_hybrid_assembly.smk'
include: 'rules/35_motif_search.smk'
include: 'rules/40_align_contigs.smk'
include: 'rules/50_align_reads.smk'
include: 'rules/55_subset_wg.smk'
include: 'rules/60_eval_contig_align.smk'
include: 'rules/65_call_variants.smk'
include: 'rules/70_est_assm_qv.smk'
include: 'rules/80_est_assm_errors.smk'
include: 'rules/99_pop_share.smk'

localrules: run_all

# samples with short-read data can be used to compute
# an assembly QV estimate
SAMPLES, SHORT_READ_SAMPLE_NAMES = read_sample_table()  # requires config['samples']
SAMPLE_DATA = collect_sample_data(SAMPLES, SHORT_READ_SAMPLE_NAMES)
SAMPLE_NAMES = sorted(SAMPLES['sample'].values)

CURRENT_ERROR_SAMPLES = []
COMPLETE_SAMPLES = [s for s in SAMPLE_NAMES if s not in CURRENT_ERROR_SAMPLES]
COMPLETE_SR_SAMPLES = [s for s in SHORT_READ_SAMPLE_NAMES if s not in CURRENT_ERROR_SAMPLES]

rule run_all:
    input:
        aln_ref = expand(
            'output/alignments/reads-to-ref/{sample}.{other_reads}_aln-to_{reference}.{ext}',
            sample=COMPLETE_SAMPLES,
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            ext=['paf.gz', 'bam.bai']
        ),
        run_wg = expand(
            'output/eval/contigs-to-ref/10_renamed/{sample}.{hifi_type}.{ont_type}.na.wg_aln-to_{reference}.ref-cov.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38']
        ),
        aln_wg = expand(
            'output/alignments/reads-to-assm/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.wg.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        motifs_wg = expand(
            'output/motif_search/20_target_agg/10_renamed/{sample}.{hifi_type}.{ont_type}.na.wg.{motif}.agg-trg.tsv',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        subset_assm = expand(
            'output/subset_wg/20_extract_contigs/{sample}.{hifi_type}.{ont_type}.na.{chrom}.fasta',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            chrom=['chrY', 'chrX']
        ),
        subset_ctg_aln = expand(
            'output/subset_wg/30_extract_ctgaln/{sample}.{hifi_type}.{ont_type}.na.chrY_aln-to_{reference}.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            reference=['T2TXY', 'GRCh38'],
            ext=['bam.bai', 'paf.gz']
        ),
        subset_read_aln = expand(
            'output/subset_wg/40_extract_rdaln/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL', 'HIFIRW'],
            ext=['bam.bai', 'paf.gz']
        ),
        subset_motif_seq = expand(
            'output/subset_wg/50_subset_motif/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.hiq-seq.fasta',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search']
        ),
        repmasker = expand(
            'output/motif_search/45_rm_norm/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{ext}',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            ext=['rm-out.tar.gz', 'rm-mask.fasta', 'matches.tsv']
        ),
        aln_classes = expand(
            'output/alignments/seqclasses-to-assm/{seq_classes}_aln-to_{sample}.{hifi_type}.{ont_type}.na.chrY.paf.gz',
            seq_classes=['GRCh38_chrY-seq-classes_coord_plus_repeats'],
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
        ),
        snv_calls_dv = expand(
            'output/variant_calls/10_filter_{other_reads}/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{caller}-HET-SNV.stats',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW'],
            caller=['dv']
        ),
        snv_calls_pr = expand(
            'output/variant_calls/10_filter_{other_reads}/{sample}/{sample}.{hifi_type}.{ont_type}.na.chrY.{caller}-HET-SNV.stats',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['ONTUL'],
            caller=['pr']
        ),
        est_assm_qv = expand(
            'output/eval/assembly_qv/{sample}.{hifi_type}.{ont_type}.na.wg.yak-qv.txt',
            sample=COMPLETE_SR_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL']
        ),
        dump_short_meryl_db = expand(
            'output/kmer_dump/{sample}.{reads}.k{kmer}.meryl',
            sample=COMPLETE_SR_SAMPLES,
            reads=['SHORT'],
            kmer=[21]  # this value: Merqury/meryl docs, for human diploid
        ),
        vm_assm_errors = expand(
            'output/eval/assm_errors/{sample}.{hifi_type}.{ont_type}.na.{chrom}.{other_reads}.vm.chk',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW', 'ONTUL'],
            chrom=['chrX', 'chrY']
        )


rule populate_share:
    input:
        refs = 'output/share/references.ok',
        aln_reads_ref = expand(
            'output/share/alignments/reads-to-ref/{sample}.{other_reads}_aln-to_{reference}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            other_reads=['HIFIRW'],
            reference=['T2TXY', 'GRCh38'],
            chrom=['chrY']
        ),
        assemblies = expand(
            'output/share/assemblies/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY', 'chrX'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_ctg_ref = expand(
            'output/share/alignments/contigs-to-ref/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}_aln-to_{reference}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_reads_assm = expand(
            'output/share/alignments/reads-to-assm/verkko_{major}_{minor}/{sample}.{other_reads}_aln-to_{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            other_reads=['HIFIRW', 'ONTUL'],
            mapq=['na'],
            chrom=['wg', 'chrY'],
            reference=['T2TXY', 'GRCh38'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        aln_seqclass_assm = expand(
            'output/share/alignments/seqclasses-to-assm/verkko_{major}_{minor}/{seq_classes}_aln-to_{sample}.{hifi_type}.{ont_type}.{mapq}.{chrom}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            mapq=['na'],
            chrom=['chrY'],
            seq_classes=['GRCh38_chrY-seq-classes_coord_plus_repeats', 'T2T.chrY-seq-classes'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        motif_sub = expand(
            'output/share/motif_search/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.{motif}.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            motif=config['motif_search'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        repmask_out = expand(
            'output/share/repeatmasker/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        ),
        var_calls = expand(
            'output/share/variant_calls/verkko_{major}_{minor}/{sample}.{hifi_type}.{ont_type}.na.chrY.copied.ok',
            sample=COMPLETE_SAMPLES,
            hifi_type=['HIFIRW'],
            ont_type=['ONTUL'],
            major=config['verkko_major'].strip('"'),
            minor=config['verkko_minor'].strip('"'),
        )

        # DEPRECATED: whole-genome runs by default
        # readsets = expand(
        #     'output/share/read_subsets/{sample}_{read_type}.{chrom}-reads.{mapq}.copied.ok',
        #     sample=COMPLETE_SAMPLES,
        #     read_type=['HIFIEC', 'HIFIAF', 'ONTUL'],
        #     mapq=['mq00'],
        #     chrom=['chrY'],
        # ),
